deg = pi/180;

% joint angle limits from 
% A combined optimization method for solving the inverse kinematics problem...
% Wang & Chen
% IEEE Trans. RA 7(4) 1991 pp 489-
L(1) = Revolute('d', 1, 'a', 0, 'alpha', 0, 'modified', ...
    'I', [0, 0, 0], ...
    'm', 0, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 0, ...
    'qlim', [-180 180]*deg );

L(2) = Revolute('d', 0, 'a', 0, 'alpha', -90, 'modified', ...
    'I', [0.0125, 0.8396, 0.8396], ...
    'r', [0.5, 0, 0], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 0, ...
    'qlim', [-90 90]*deg );

L(3) = Revolute('d', 0, 'a', 1, 'alpha', 0, 'modified',  ...
    'I', [0.0125, 0.8396, 0.8396], ...
    'r', [0.5, 0, 0], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 0, ...
    'qlim', [-90 90]*deg );

L(4) = Revolute('d', 0, 'a', 1, 'alpha', 0, 'modified',  ...
    'm', 1, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 0, ...
    'qlim', [-90 90]*deg );

p560 = SerialLink(L, 'name', 'Puma 560', ...
    'manufacturer', 'Unimation', 'ikine', 'puma', 'comment', 'viscous friction; params of 8/95');


p560.model3d = 'UNIMATE/puma560';


clear L